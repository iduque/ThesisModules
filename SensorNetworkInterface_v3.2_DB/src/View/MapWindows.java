
package View;

import Main.CommonVar;
import Main.Controller;
import DataBase.LocationsDB;
import DataBaseModel.Locations;
import DataBaseModel.Sensors;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author id11ab
 */
public class MapWindows extends javax.swing.JFrame {

    Controller _controller;
    
    LinkedList<String> _labels = new LinkedList<String>();
    LinkedList<String> _columns = new LinkedList<String>();
    
    private String VALUE_COLUMN;
    private String STATUS_COLUMN;
    
    /** Creates new form NewJFrame */
    public MapWindows(Controller c, String module, String channel, String id, String name, String type,
            String value, String status, String userName) {

        _controller = c;

        initComponents();
        
        //Set mouse listener for these components
        this.Hall.addMouseListener(new MyMouseListener("Hall"));
        this.Bedroom.addMouseListener(new MyMouseListener("Bedroom 1"));
        this.Kitchen.addMouseListener(new MyMouseListener("Kitchen"));
        this.Bathroom.addMouseListener(new MyMouseListener("Bathroom"));
        this.LivingRoomTable.addMouseListener(new MyMouseListener("Dining Area"));
        this.LivingRoomSofa.addMouseListener(new MyMouseListener("Living Room"));

        
        //Set cursor when the mouse is over the component
        this.Hall.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        this.Bedroom.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        this.Kitchen.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        this.Bathroom.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        this.LivingRoomTable.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        this.LivingRoomSofa.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        
        //Initial information
        jlInfo.setForeground(Color.BLUE);
        jlInfo.setText("Select a room, please");

        //Set user name
        this.jtfUsername.setText(userName);
        
        //Initial view
        this.JPanelData.setVisible(false);
        this.pack();
        this.setVisible(true);
        this.setLocationRelativeTo(null);

        //Window close handler
        this.addWindowListener(new WindowAdapter() {

	    @Override
	    public void windowClosing(WindowEvent e) {
                _controller.close();
	    }
	});

        //Define status and value colums
        STATUS_COLUMN=status;
        VALUE_COLUMN=value;
        
        //Columns order
        _columns.add(id);
        _columns.add(channel);
        _columns.add(name);
        _columns.add(status);
        _columns.add(value);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPanelMap = new javax.swing.JPanel();
        jpLeft = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtSensorsInfo = new javax.swing.JTextArea();
        jlCaption = new javax.swing.JLabel();
        jpCenter = new javax.swing.JPanel();
        JLayerMap = new javax.swing.JLayeredPane();
        jl_K59 = new javax.swing.JLabel();
        jl_K49 = new javax.swing.JLabel();
        jl_K57 = new javax.swing.JLabel();
        jl_K56 = new javax.swing.JLabel();
        jl_K55 = new javax.swing.JLabel();
        jl_K54 = new javax.swing.JLabel();
        jl_K53 = new javax.swing.JLabel();
        jl_K52 = new javax.swing.JLabel();
        jl_K51 = new javax.swing.JLabel();
        jl_K50 = new javax.swing.JLabel();
        jl_K44 = new javax.swing.JLabel();
        jl_K43 = new javax.swing.JLabel();
        jl_K42 = new javax.swing.JLabel();
        jl_K40 = new javax.swing.JLabel();
        jl_K39 = new javax.swing.JLabel();
        jl_K38 = new javax.swing.JLabel();
        jl_K37 = new javax.swing.JLabel();
        jl_K36 = new javax.swing.JLabel();
        jl_K35 = new javax.swing.JLabel();
        jl_K34 = new javax.swing.JLabel();
        jl_K33 = new javax.swing.JLabel();
        jl_K32 = new javax.swing.JLabel();
        jl_K31 = new javax.swing.JLabel();
        jl_K30 = new javax.swing.JLabel();
        jl_K29 = new javax.swing.JLabel();
        jl_K28 = new javax.swing.JLabel();
        jl_K27 = new javax.swing.JLabel();
        jl_K26 = new javax.swing.JLabel();
        jl_K25 = new javax.swing.JLabel();
        jl_K24 = new javax.swing.JLabel();
        jl_K23 = new javax.swing.JLabel();
        jl_K22 = new javax.swing.JLabel();
        jl_K21 = new javax.swing.JLabel();
        jl_K20 = new javax.swing.JLabel();
        jl_K19 = new javax.swing.JLabel();
        jl_K18 = new javax.swing.JLabel();
        jl_K17 = new javax.swing.JLabel();
        jl_K16 = new javax.swing.JLabel();
        jl_K15 = new javax.swing.JLabel();
        jl_K14 = new javax.swing.JLabel();
        jl_K13 = new javax.swing.JLabel();
        jl_K12 = new javax.swing.JLabel();
        jl_K11 = new javax.swing.JLabel();
        jl_K10 = new javax.swing.JLabel();
        jl_K9 = new javax.swing.JLabel();
        jl_K8 = new javax.swing.JLabel();
        jl_K7 = new javax.swing.JLabel();
        jl_K6 = new javax.swing.JLabel();
        jl_K5 = new javax.swing.JLabel();
        jl_K4 = new javax.swing.JLabel();
        jl_K3 = new javax.swing.JLabel();
        jl_K2 = new javax.swing.JLabel();
        jl_K1 = new javax.swing.JLabel();
        Hall = new javax.swing.JLabel();
        Kitchen = new javax.swing.JLabel();
        Bedroom = new javax.swing.JLabel();
        Bathroom = new javax.swing.JLabel();
        LivingRoomTable = new javax.swing.JLabel();
        LivingRoomSofa = new javax.swing.JLabel();
        jlInfo = new javax.swing.JLabel();
        jlMap = new javax.swing.JLabel();
        JPanelData = new javax.swing.JPanel();
        JTabbedData = new javax.swing.JTabbedPane();
        JPanelBack = new javax.swing.JPanel();
        jbBack = new javax.swing.JButton();
        jpRight = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtPreviousActivitiesInfo = new javax.swing.JTextArea();
        jlPreviousActivities = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtCurrentActivitiesInfo = new javax.swing.JTextArea();
        jlCurrentActivities = new javax.swing.JLabel();
        jlUsername = new javax.swing.JLabel();
        jtfUsername = new javax.swing.JTextField();
        jbStartStopRecording = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtActivitiesHistory = new javax.swing.JTextArea();
        jlCurrentActivities1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sensor Network Interface");
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        JPanelMap.setMaximumSize(new java.awt.Dimension(870, 620));
        JPanelMap.setPreferredSize(new java.awt.Dimension(870, 620));
        JPanelMap.setLayout(new javax.swing.BoxLayout(JPanelMap, javax.swing.BoxLayout.LINE_AXIS));

        jpLeft.setMaximumSize(new java.awt.Dimension(250, 640));
        jpLeft.setPreferredSize(new java.awt.Dimension(250, 640));

        jtSensorsInfo.setEditable(false);
        jScrollPane1.setViewportView(jtSensorsInfo);

        jlCaption.setText("Caption");

        javax.swing.GroupLayout jpLeftLayout = new javax.swing.GroupLayout(jpLeft);
        jpLeft.setLayout(jpLeftLayout);
        jpLeftLayout.setHorizontalGroup(
            jpLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(jlCaption))
                .addContainerGap())
        );
        jpLeftLayout.setVerticalGroup(
            jpLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlCaption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(831, 831, 831))
        );

        JPanelMap.add(jpLeft);

        jpCenter.setMaximumSize(new java.awt.Dimension(620, 640));
        jpCenter.setPreferredSize(new java.awt.Dimension(620, 640));

        JLayerMap.setBackground(new java.awt.Color(255, 255, 255));

        jl_K59.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K59.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K59.setText("59");
        jl_K59.setToolTipText("Doorbell");
        jl_K59.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K59.setOpaque(true);
        jl_K59.setBounds(15, 200, 14, 12);
        JLayerMap.add(jl_K59, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K49.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K49.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K49.setText("49");
        jl_K49.setToolTipText("TV");
        jl_K49.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K49.setOpaque(true);
        jl_K49.setBounds(470, 210, 14, 12);
        JLayerMap.add(jl_K49, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K57.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K57.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K57.setText("57");
        jl_K57.setToolTipText("Living Room Light");
        jl_K57.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K57.setOpaque(true);
        jl_K57.setBounds(260, 47, 14, 14);
        JLayerMap.add(jl_K57, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K56.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K56.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K56.setText("56");
        jl_K56.setToolTipText("Toaster");
        jl_K56.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K56.setOpaque(true);
        jl_K56.setBounds(110, 250, 14, 12);
        JLayerMap.add(jl_K56, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K55.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K55.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K55.setText("55");
        jl_K55.setToolTipText("Dishwasher");
        jl_K55.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K55.setOpaque(true);
        jl_K55.setBounds(30, 280, 14, 12);
        JLayerMap.add(jl_K55, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K54.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K54.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K54.setText("54");
        jl_K54.setToolTipText("Microwave");
        jl_K54.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K54.setOpaque(true);
        jl_K54.setBounds(140, 250, 14, 12);
        JLayerMap.add(jl_K54, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K53.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K53.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K53.setText("53");
        jl_K53.setToolTipText("Table Lamp");
        jl_K53.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K53.setOpaque(true);
        jl_K53.setBounds(470, 480, 14, 12);
        JLayerMap.add(jl_K53, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K52.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K52.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K52.setText("52");
        jl_K52.setToolTipText("Computer");
        jl_K52.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K52.setOpaque(true);
        jl_K52.setBounds(480, 444, 14, 12);
        JLayerMap.add(jl_K52, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K51.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K51.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K51.setText("51");
        jl_K51.setToolTipText("Kettle");
        jl_K51.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K51.setOpaque(true);
        jl_K51.setBounds(30, 250, 14, 12);
        JLayerMap.add(jl_K51, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K50.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K50.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K50.setText("50");
        jl_K50.setToolTipText("Fridge/Freezer");
        jl_K50.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K50.setOpaque(true);
        jl_K50.setBounds(120, 360, 14, 12);
        JLayerMap.add(jl_K50, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K44.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K44.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K44.setText("44");
        jl_K44.setToolTipText("Cooker");
        jl_K44.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K44.setOpaque(true);
        jl_K44.setBounds(80, 250, 14, 12);
        JLayerMap.add(jl_K44, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K43.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K43.setText("43");
        jl_K43.setToolTipText("Downstairs Lights");
        jl_K43.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K43.setOpaque(true);
        jl_K43.setBounds(320, 176, 14, 12);
        JLayerMap.add(jl_K43, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K42.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K42.setText("42");
        jl_K42.setToolTipText("Hall Lights");
        jl_K42.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K42.setOpaque(true);
        jl_K42.setBounds(60, 160, 14, 12);
        JLayerMap.add(jl_K42, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K40.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K40.setText("40");
        jl_K40.setToolTipText("Wardrobe Door Right");
        jl_K40.setAlignmentY(0.0F);
        jl_K40.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K40.setIconTextGap(0);
        jl_K40.setOpaque(true);
        jl_K40.setBounds(570, 481, 12, 12);
        JLayerMap.add(jl_K40, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K39.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K39.setText("39");
        jl_K39.setToolTipText("Wardrobe Door Middle");
        jl_K39.setAlignmentY(0.0F);
        jl_K39.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K39.setIconTextGap(0);
        jl_K39.setOpaque(true);
        jl_K39.setBounds(570, 470, 12, 12);
        JLayerMap.add(jl_K39, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K38.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K38.setText("38");
        jl_K38.setToolTipText("Wardrobe Door Left");
        jl_K38.setAlignmentY(0.0F);
        jl_K38.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K38.setIconTextGap(0);
        jl_K38.setOpaque(true);
        jl_K38.setBounds(570, 425, 12, 12);
        JLayerMap.add(jl_K38, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K37.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K37.setText("37");
        jl_K37.setToolTipText("Bed Pressure");
        jl_K37.setAlignmentY(0.0F);
        jl_K37.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K37.setIconTextGap(0);
        jl_K37.setOpaque(true);
        jl_K37.setBounds(570, 280, 12, 12);
        JLayerMap.add(jl_K37, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K36.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K36.setText("36");
        jl_K36.setToolTipText("Bedroom Door");
        jl_K36.setAlignmentY(0.0F);
        jl_K36.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K36.setIconTextGap(0);
        jl_K36.setOpaque(true);
        jl_K36.setBounds(442, 350, 12, 12);
        JLayerMap.add(jl_K36, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K35.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K35.setText("35");
        jl_K35.setToolTipText("Office Chair Pressure");
        jl_K35.setAlignmentY(0.0F);
        jl_K35.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K35.setIconTextGap(0);
        jl_K35.setOpaque(true);
        jl_K35.setBounds(514, 470, 12, 12);
        JLayerMap.add(jl_K35, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K34.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K34.setText("34");
        jl_K34.setToolTipText("Desk Door");
        jl_K34.setAlignmentY(0.0F);
        jl_K34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K34.setIconTextGap(0);
        jl_K34.setOpaque(true);
        jl_K34.setBounds(500, 448, 12, 12);
        JLayerMap.add(jl_K34, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K33.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K33.setText("33");
        jl_K33.setToolTipText("Desk Drawer Top");
        jl_K33.setAlignmentY(0.0F);
        jl_K33.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K33.setIconTextGap(0);
        jl_K33.setOpaque(true);
        jl_K33.setBounds(467, 515, 12, 12);
        JLayerMap.add(jl_K33, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K32.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K32.setText("32");
        jl_K32.setToolTipText("Desk Drawer Middle");
        jl_K32.setAlignmentY(0.0F);
        jl_K32.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K32.setIconTextGap(0);
        jl_K32.setOpaque(true);
        jl_K32.setBounds(479, 515, 12, 12);
        JLayerMap.add(jl_K32, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K31.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K31.setText("31");
        jl_K31.setToolTipText("Desk Drawer Bottom");
        jl_K31.setAlignmentY(0.0F);
        jl_K31.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K31.setIconTextGap(0);
        jl_K31.setOpaque(true);
        jl_K31.setBounds(491, 515, 12, 12);
        JLayerMap.add(jl_K31, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K30.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K30.setText("30");
        jl_K30.setToolTipText("Cupboard Small Drawer Top");
        jl_K30.setAlignmentY(0.0F);
        jl_K30.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K30.setIconTextGap(0);
        jl_K30.setOpaque(true);
        jl_K30.setBounds(127, 126, 12, 12);
        JLayerMap.add(jl_K30, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K29.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K29.setText("29");
        jl_K29.setToolTipText("Cupboard Small Drawer Middle");
        jl_K29.setAlignmentY(0.0F);
        jl_K29.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K29.setIconTextGap(0);
        jl_K29.setOpaque(true);
        jl_K29.setBounds(142, 126, 12, 12);
        JLayerMap.add(jl_K29, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K28.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K28.setText("28");
        jl_K28.setToolTipText("Cupboard Small Drawer Bottom");
        jl_K28.setAlignmentY(0.0F);
        jl_K28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K28.setIconTextGap(0);
        jl_K28.setOpaque(true);
        jl_K28.setBounds(154, 126, 12, 12);
        JLayerMap.add(jl_K28, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K27.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K27.setText("27");
        jl_K27.setToolTipText("Cupboard Small Door Right");
        jl_K27.setAlignmentY(0.0F);
        jl_K27.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K27.setIconTextGap(0);
        jl_K27.setOpaque(true);
        jl_K27.setBounds(130, 88, 12, 12);
        JLayerMap.add(jl_K27, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K26.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K26.setText("26");
        jl_K26.setToolTipText("Cupboard Small Door Left");
        jl_K26.setAlignmentY(0.0F);
        jl_K26.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K26.setIconTextGap(0);
        jl_K26.setOpaque(true);
        jl_K26.setBounds(130, 140, 12, 12);
        JLayerMap.add(jl_K26, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K25.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K25.setText("25");
        jl_K25.setToolTipText("Cupboard Big Drawer Top");
        jl_K25.setAlignmentY(0.0F);
        jl_K25.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K25.setIconTextGap(0);
        jl_K25.setOpaque(true);
        jl_K25.setBounds(142, 65, 12, 12);
        JLayerMap.add(jl_K25, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K24.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K24.setText("24");
        jl_K24.setToolTipText("Cupboard Big Drawer Bottom");
        jl_K24.setAlignmentY(0.0F);
        jl_K24.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K24.setIconTextGap(0);
        jl_K24.setOpaque(true);
        jl_K24.setBounds(155, 65, 12, 12);
        JLayerMap.add(jl_K24, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K23.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K23.setText("23");
        jl_K23.setToolTipText("Living Room Door");
        jl_K23.setAlignmentY(0.0F);
        jl_K23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K23.setIconTextGap(0);
        jl_K23.setOpaque(true);
        jl_K23.setBounds(122, 176, 12, 12);
        JLayerMap.add(jl_K23, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K22.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K22.setText("22");
        jl_K22.setToolTipText("Desk Pressure");
        jl_K22.setAlignmentY(0.0F);
        jl_K22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K22.setIconTextGap(0);
        jl_K22.setOpaque(true);
        jl_K22.setBounds(310, 48, 12, 12);
        JLayerMap.add(jl_K22, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K21.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K21.setText("21");
        jl_K21.setToolTipText("Sofa Seatplace #1");
        jl_K21.setAlignmentY(0.0F);
        jl_K21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K21.setIconTextGap(0);
        jl_K21.setOpaque(true);
        jl_K21.setBounds(341, 85, 12, 12);
        JLayerMap.add(jl_K21, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K20.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K20.setText("20");
        jl_K20.setToolTipText("Sofa Seatplace #0");
        jl_K20.setAlignmentY(0.0F);
        jl_K20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K20.setIconTextGap(0);
        jl_K20.setOpaque(true);
        jl_K20.setBounds(283, 85, 12, 12);
        JLayerMap.add(jl_K20, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K19.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K19.setText("19");
        jl_K19.setToolTipText("Table Pressure");
        jl_K19.setAlignmentY(0.0F);
        jl_K19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K19.setIconTextGap(0);
        jl_K19.setOpaque(true);
        jl_K19.setBounds(573, 160, 12, 12);
        JLayerMap.add(jl_K19, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K18.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K18.setText("18");
        jl_K18.setToolTipText("Sofa Seatplace #3");
        jl_K18.setAlignmentY(0.0F);
        jl_K18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K18.setIconTextGap(0);
        jl_K18.setOpaque(true);
        jl_K18.setBounds(573, 110, 12, 12);
        JLayerMap.add(jl_K18, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K17.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K17.setText("17");
        jl_K17.setToolTipText("Sofa Seatplace #2");
        jl_K17.setAlignmentY(0.0F);
        jl_K17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K17.setIconTextGap(0);
        jl_K17.setOpaque(true);
        jl_K17.setBounds(540, 50, 12, 12);
        JLayerMap.add(jl_K17, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K16.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K16.setText("16");
        jl_K16.setToolTipText("Sofa Seatplace #1");
        jl_K16.setAlignmentY(0.0F);
        jl_K16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K16.setIconTextGap(0);
        jl_K16.setOpaque(true);
        jl_K16.setBounds(495, 50, 12, 12);
        JLayerMap.add(jl_K16, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K15.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K15.setText("15");
        jl_K15.setToolTipText("Sofa Seatplace #0");
        jl_K15.setAlignmentY(0.0F);
        jl_K15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K15.setIconTextGap(0);
        jl_K15.setOpaque(true);
        jl_K15.setBounds(450, 50, 12, 12);
        JLayerMap.add(jl_K15, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K14.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K14.setText("14");
        jl_K14.setToolTipText("Toilet Flush");
        jl_K14.setAlignmentY(0.0F);
        jl_K14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K14.setIconTextGap(0);
        jl_K14.setOpaque(true);
        jl_K14.setBounds(150, 570, 12, 12);
        JLayerMap.add(jl_K14, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K13.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K13.setText("13");
        jl_K13.setToolTipText("Bathroom Door");
        jl_K13.setAlignmentY(0.0F);
        jl_K13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K13.setIconTextGap(0);
        jl_K13.setOpaque(true);
        jl_K13.setBounds(207, 458, 12, 12);
        JLayerMap.add(jl_K13, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K12.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K12.setText("12");
        jl_K12.setToolTipText("Water Pipe Sink Cold");
        jl_K12.setAlignmentY(0.0F);
        jl_K12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K12.setIconTextGap(0);
        jl_K12.setOpaque(true);
        jl_K12.setBounds(190, 506, 12, 12);
        JLayerMap.add(jl_K12, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K11.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K11.setText("11");
        jl_K11.setToolTipText("Water Pipe Sink Hot");
        jl_K11.setAlignmentY(0.0F);
        jl_K11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K11.setIconTextGap(0);
        jl_K11.setOpaque(true);
        jl_K11.setBounds(190, 493, 12, 12);
        JLayerMap.add(jl_K11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K10.setFont(new java.awt.Font("Tahoma", 0, 8));
        jl_K10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K10.setText("10");
        jl_K10.setToolTipText("Floor Cupboard Left");
        jl_K10.setAlignmentY(0.0F);
        jl_K10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K10.setIconTextGap(0);
        jl_K10.setOpaque(true);
        jl_K10.setBounds(59, 270, 12, 12);
        JLayerMap.add(jl_K10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K9.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K9.setText("9");
        jl_K9.setToolTipText("Floor Cupboard Right");
        jl_K9.setAlignmentY(0.0F);
        jl_K9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K9.setIconTextGap(0);
        jl_K9.setOpaque(true);
        jl_K9.setBounds(140, 270, 12, 12);
        JLayerMap.add(jl_K9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K8.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K8.setText("8");
        jl_K8.setToolTipText("Floor Cupboard Middle");
        jl_K8.setAlignmentY(0.0F);
        jl_K8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K8.setIconTextGap(0);
        jl_K8.setOpaque(true);
        jl_K8.setBounds(99, 270, 12, 12);
        JLayerMap.add(jl_K8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K7.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K7.setText("7");
        jl_K7.setToolTipText("Floor Cupboard Drawer Right");
        jl_K7.setAlignmentY(0.0F);
        jl_K7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K7.setIconTextGap(0);
        jl_K7.setOpaque(true);
        jl_K7.setBounds(116, 261, 12, 12);
        JLayerMap.add(jl_K7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K6.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K6.setText("6");
        jl_K6.setToolTipText("Floor Cupboard Drawer Middle");
        jl_K6.setAlignmentY(0.0F);
        jl_K6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K6.setIconTextGap(0);
        jl_K6.setOpaque(true);
        jl_K6.setBounds(70, 261, 12, 12);
        JLayerMap.add(jl_K6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K5.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K5.setText("5");
        jl_K5.setToolTipText("Ceiling Cupboard Right");
        jl_K5.setAlignmentY(0.0F);
        jl_K5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K5.setIconTextGap(0);
        jl_K5.setMaximumSize(new java.awt.Dimension(12, 12));
        jl_K5.setOpaque(true);
        jl_K5.setPreferredSize(new java.awt.Dimension(12, 12));
        jl_K5.setBounds(139, 237, 12, 12);
        JLayerMap.add(jl_K5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K4.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K4.setText("4");
        jl_K4.setToolTipText("Ceiling Cupboard Middle");
        jl_K4.setAlignmentY(0.0F);
        jl_K4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K4.setIconTextGap(0);
        jl_K4.setMaximumSize(new java.awt.Dimension(12, 12));
        jl_K4.setOpaque(true);
        jl_K4.setPreferredSize(new java.awt.Dimension(12, 12));
        jl_K4.setBounds(99, 237, 12, 12);
        JLayerMap.add(jl_K4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K3.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K3.setText("3");
        jl_K3.setToolTipText("Ceiling Cupboard Left");
        jl_K3.setAlignmentY(0.0F);
        jl_K3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K3.setIconTextGap(0);
        jl_K3.setMaximumSize(new java.awt.Dimension(12, 12));
        jl_K3.setOpaque(true);
        jl_K3.setPreferredSize(new java.awt.Dimension(12, 12));
        jl_K3.setBounds(59, 237, 12, 12);
        JLayerMap.add(jl_K3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K2.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K2.setText("2");
        jl_K2.setToolTipText("Water Pipe Cold");
        jl_K2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K2.setOpaque(true);
        jl_K2.setBounds(21, 305, 14, 12);
        JLayerMap.add(jl_K2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jl_K1.setFont(new java.awt.Font("Tahoma", 0, 10));
        jl_K1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_K1.setText("1");
        jl_K1.setToolTipText("Water Pipe Hot");
        jl_K1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jl_K1.setOpaque(true);
        jl_K1.setBounds(21, 317, 14, 12);
        JLayerMap.add(jl_K1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Hall.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Hall.setText("Hall");
        Hall.setBounds(10, 60, 105, 170);
        JLayerMap.add(Hall, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Kitchen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Kitchen.setText("Kitchen");
        Kitchen.setBounds(10, 230, 150, 160);
        JLayerMap.add(Kitchen, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Bedroom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bedroom.setText("Bedroom");
        Bedroom.setBounds(440, 240, 170, 290);
        JLayerMap.add(Bedroom, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Bathroom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bathroom.setText("Bathroom");
        Bathroom.setBounds(10, 400, 200, 190);
        JLayerMap.add(Bathroom, javax.swing.JLayeredPane.DEFAULT_LAYER);

        LivingRoomTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LivingRoomTable.setText("Dining Area");
        LivingRoomTable.setBounds(120, 30, 280, 200);
        JLayerMap.add(LivingRoomTable, javax.swing.JLayeredPane.DEFAULT_LAYER);

        LivingRoomSofa.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LivingRoomSofa.setText("Living Room");
        LivingRoomSofa.setAlignmentY(0.0F);
        LivingRoomSofa.setBounds(400, 30, 210, 200);
        JLayerMap.add(LivingRoomSofa, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jlInfo.setForeground(new java.awt.Color(255, 0, 0));
        jlInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlInfo.setBounds(470, 560, 160, 30);
        JLayerMap.add(jlInfo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jlMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background.png"))); // NOI18N
        jlMap.setBounds(0, 10, 630, 600);
        JLayerMap.add(jlMap, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jpCenterLayout = new javax.swing.GroupLayout(jpCenter);
        jpCenter.setLayout(jpCenterLayout);
        jpCenterLayout.setHorizontalGroup(
            jpCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
            .addGroup(jpCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpCenterLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(JLayerMap, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jpCenterLayout.setVerticalGroup(
            jpCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
            .addGroup(jpCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpCenterLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(JLayerMap, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        JPanelMap.add(jpCenter);

        getContentPane().add(JPanelMap);

        JPanelData.setEnabled(false);
        JPanelData.setMaximumSize(new java.awt.Dimension(870, 620));
        JPanelData.setMinimumSize(new java.awt.Dimension(0, 0));
        JPanelData.setPreferredSize(new java.awt.Dimension(870, 620));
        JPanelData.setLayout(new java.awt.BorderLayout());

        JTabbedData.setMinimumSize(new java.awt.Dimension(650, 600));
        JTabbedData.setPreferredSize(new java.awt.Dimension(650, 600));
        JPanelData.add(JTabbedData, java.awt.BorderLayout.CENTER);

        jbBack.setText("Back");
        jbBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPanelBackLayout = new javax.swing.GroupLayout(JPanelBack);
        JPanelBack.setLayout(JPanelBackLayout);
        JPanelBackLayout.setHorizontalGroup(
            JPanelBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPanelBackLayout.createSequentialGroup()
                .addContainerGap(718, Short.MAX_VALUE)
                .addComponent(jbBack, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        JPanelBackLayout.setVerticalGroup(
            JPanelBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelBackLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbBack, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        JPanelData.add(JPanelBack, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(JPanelData);

        jpRight.setMaximumSize(new java.awt.Dimension(250, 620));
        jpRight.setPreferredSize(new java.awt.Dimension(250, 620));

        jtPreviousActivitiesInfo.setEditable(false);
        jtPreviousActivitiesInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(jtPreviousActivitiesInfo);

        jlPreviousActivities.setText("Logs");
        jlPreviousActivities.setPreferredSize(new java.awt.Dimension(200, 14));

        jtCurrentActivitiesInfo.setEditable(false);
        jtCurrentActivitiesInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane4.setViewportView(jtCurrentActivitiesInfo);

        jlCurrentActivities.setText("Current Activities");
        jlCurrentActivities.setPreferredSize(new java.awt.Dimension(200, 14));

        jlUsername.setText("Username:");
        jlUsername.setPreferredSize(new java.awt.Dimension(200, 14));

        jtfUsername.setEditable(false);
        jtfUsername.setToolTipText("Username");

        jbStartStopRecording.setText("Start Recording");
        jbStartStopRecording.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStartStopRecordingActionPerformed(evt);
            }
        });

        jtActivitiesHistory.setEditable(false);
        jtActivitiesHistory.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane5.setViewportView(jtActivitiesHistory);

        jlCurrentActivities1.setText("Latest Activites");
        jlCurrentActivities1.setPreferredSize(new java.awt.Dimension(200, 14));

        javax.swing.GroupLayout jpRightLayout = new javax.swing.GroupLayout(jpRight);
        jpRight.setLayout(jpRightLayout);
        jpRightLayout.setHorizontalGroup(
            jpRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jpRightLayout.createSequentialGroup()
                            .addComponent(jlUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jtfUsername))
                        .addComponent(jlPreviousActivities, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlCurrentActivities, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRightLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jpRightLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jbStartStopRecording)
                .addContainerGap(66, Short.MAX_VALUE))
            .addGroup(jpRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jpRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jpRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlCurrentActivities1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jpRightLayout.setVerticalGroup(
            jpRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRightLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jpRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlPreviousActivities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jlCurrentActivities1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlCurrentActivities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbStartStopRecording, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        getContentPane().add(jpRight);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBackActionPerformed
        JPanelData.setVisible(false);
        JPanelMap.setVisible(true);
    }//GEN-LAST:event_jbBackActionPerformed

    private void jbStartStopRecordingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStartStopRecordingActionPerformed
        if(_controller.getStatusRecording()){
            _controller.stopRecording(); //Set recording status to false
            this.jbStartStopRecording.setText("Start Recording");
        }else{
            _controller.startRecording(); //Set recording status to true
            this.jbStartStopRecording.setText("Stop Recording");
        }
    }//GEN-LAST:event_jbStartStopRecordingActionPerformed


   /**
     * Adding as many tabs as different kinds of ChildNodes have been read 
     * @param data Set of data
     */ 
   public void initializeTable(Collection<Locations> locations, Collection<Sensors> sensors){
       
       Iterator itLocations = locations.iterator();
       String sensorsInfo = "";

       Collection<Locations> allLocations = LocationsDB.getAllLocations();

       while(itLocations.hasNext()){

            Locations location = (Locations) itLocations.next();

            LinkedList adaptedData = new LinkedList();
            String sensorsInfoAux = "";

            Iterator itSensors = sensors.iterator();
            while(itSensors.hasNext()){

                Sensors sensor = (Sensors) itSensors.next();

                if (LocationsDB.getTopLocation(sensor.getLocationId(), allLocations) == location.getLocationId()){ 
                //if (sensor.getLocationId() == location.getLocationId() || 
                  // (LocationsDB.getChildrenNodesSensorsIdByParentLocation(
                  // location.getLocationId()).contains(sensor.getLocationId()))){
                   
                                
                    adaptedData.add(sensor.getSensorId().toString()); //ID

                    //Add the sensor id information to the text area
                    sensorsInfoAux += "--> " + sensor.getSensorId() + " - ";

                    adaptedData.add(sensor.getChannelDescriptor()); //Channel
                    adaptedData.add(sensor.getName()); //Name

                    //Add the sensor name information to the text area
                    sensorsInfoAux +=  sensor.getName() + "\n";
                
                    adaptedData.add(sensor.getStatus()); //Status
                    adaptedData.add(sensor.getValue().toString()); //Value

                    refreshSensorMap(sensor.getStatus(), sensor.getSensorId());
                }
            }

            //Add the sensor location information to the text area
            if(!adaptedData.isEmpty()){
                sensorsInfo += location.getName() + "\n" + sensorsInfoAux;

                JTableModel t = new JTableModel(adaptedData, _columns);
                JTable table = new JTable(); table.setModel(t);

                // Set the renderer for each column
                for(int j=0; j< t.getColumnCount(); j++){
                    table.getColumnModel().getColumn(j).setCellRenderer(new MyTableCellRenderer());
                }

                // Set the first visible column to 100 pixels wide
                TableColumn col = table.getColumnModel().getColumn(0);
                col.setPreferredWidth(20);
                col = table.getColumnModel().getColumn(1);
                col.setPreferredWidth(100);
                col = table.getColumnModel().getColumn(2);
                col.setPreferredWidth(170);
                col = table.getColumnModel().getColumn(3);
                col.setPreferredWidth(60);
                col = table.getColumnModel().getColumn(4);
                col.setPreferredWidth(50);

                JScrollPane scrollpane = new JScrollPane(table);
                this.JTabbedData.add(location.getName(), scrollpane);

                //Storing a list with the tabs
                _labels.add(location.getName());
           }

       }

       //Add the sensor information to the text area
       jtSensorsInfo.setText(sensorsInfo);
  }
   
   /**
    * Set the value of the sensors
    * @param room Room in which the sensor can be found
    * @param sensorDetails Sensor's details
    * @return True If the status has changed
    */
   public void updateSensorData(String room, Sensors sensors, String status, Boolean update){
       
           //Obtain the Table Model for the specified tab 
           JTableModel auxTable = ((JTableModel)
                   ((JTable)
                   ((JScrollPane) this.JTabbedData.getComponentAt(_labels.indexOf(room))).getViewport().getView())
                   .getModel());

           int pos = auxTable.getPositionSensor(sensors.getSensorId().toString());
           
           if (pos != -1 ){

               Float value = sensors.getValue();

               //Set Value column (Special features for analog sensors)
//                if((sensors.getChannelDescriptor().equals("AD0") || sensors.getChannelDescriptor().equals("AD1"))){
//                    DecimalFormat df = new DecimalFormat(_controller.getNumberFormat());
//                    value = Float.valueOf(df.format((sensors.getValue() - 0.5) * 100.0));
//                }
               
               //Update the interface data
               auxTable.setValueAt(value, pos/auxTable.getColumnCount(), _columns.indexOf(VALUE_COLUMN));

               if (update){
                    auxTable.setValueAt(status, pos/auxTable.getColumnCount(), _columns.indexOf(STATUS_COLUMN));
                    refreshSensorMap(status, sensors.getSensorId());
               }
           }
       
   }

   public void writeLogsPreviousActivities(String data){
       jtPreviousActivitiesInfo.setText(data);
       jtPreviousActivitiesInfo.getCaret().setDot( jtPreviousActivitiesInfo.getText().length() );
       jScrollPane3.scrollRectToVisible(jtPreviousActivitiesInfo.getVisibleRect() );
   }

   public void writeLogsCurrentActivities(String data){
       jtCurrentActivitiesInfo.setText(data);
       jtCurrentActivitiesInfo.getCaret().setDot( jtCurrentActivitiesInfo.getText().length() );
       jScrollPane4.scrollRectToVisible(jtCurrentActivitiesInfo.getVisibleRect() );
   }

   public void writeLatestActivities(String data){
       jtActivitiesHistory.setText(data);
       jtActivitiesHistory.getCaret().setDot( jtActivitiesHistory.getText().length() );
       jScrollPane5.scrollRectToVisible(jtActivitiesHistory.getVisibleRect() );
   }


  
  /**
     * Change the colour of the sensor represented on the Robot House map
     * @param status The new sensor's status
     * @param id The sensor's id
     */
  private void refreshSensorMap(String status, int id) {
        
        boolean greenColour = this.greenCellOrRow(status);
             
        switch (id){
            
            //Kitchen
            case 1: if(greenColour?changeLabelColor(Color.GREEN,jl_K1):changeLabelColor(Color.RED,jl_K1));
                    break;
            case 2: if(greenColour?changeLabelColor(Color.GREEN,jl_K2):changeLabelColor(Color.RED,jl_K2));
                    break;
            case 3: if(greenColour?changeLabelColor(Color.GREEN,jl_K3):changeLabelColor(Color.RED,jl_K3));
                    break;
            case 4: if(greenColour?changeLabelColor(Color.GREEN,jl_K4):changeLabelColor(Color.RED,jl_K4));
                    break;
            case 5: if(greenColour?changeLabelColor(Color.GREEN,jl_K5):changeLabelColor(Color.RED,jl_K5));
                    break;
            case 6: if(greenColour?changeLabelColor(Color.GREEN,jl_K6):changeLabelColor(Color.RED,jl_K6));
                    break;
            case 7: if(greenColour?changeLabelColor(Color.GREEN,jl_K7):changeLabelColor(Color.RED,jl_K7));
                    break;
            case 8: if(greenColour?changeLabelColor(Color.GREEN,jl_K8):changeLabelColor(Color.RED,jl_K8));
                    break;
            case 9: if(greenColour?changeLabelColor(Color.GREEN,jl_K9):changeLabelColor(Color.RED,jl_K9));
                    break;
            case 10: if(greenColour?changeLabelColor(Color.GREEN,jl_K10):changeLabelColor(Color.RED,jl_K10));
                    break;
            case 44: if(greenColour?changeLabelColor(Color.GREEN,jl_K44):changeLabelColor(Color.RED,jl_K44));
                    break;
            case 50: if(greenColour?changeLabelColor(Color.GREEN,jl_K50):changeLabelColor(Color.RED,jl_K50));
                    break;
            case 51: if(greenColour?changeLabelColor(Color.GREEN,jl_K51):changeLabelColor(Color.RED,jl_K51));
                    break;
            case 54: if(greenColour?changeLabelColor(Color.GREEN,jl_K54):changeLabelColor(Color.RED,jl_K54));
                    break;
            case 55: if(greenColour?changeLabelColor(Color.GREEN,jl_K55):changeLabelColor(Color.RED,jl_K55));
                    break;
            case 56: if(greenColour?changeLabelColor(Color.GREEN,jl_K56):changeLabelColor(Color.RED,jl_K56));
                    break;

            
            //Bathroom
            case 11: if(greenColour?changeLabelColor(Color.GREEN,jl_K11):changeLabelColor(Color.RED,jl_K11));
                    break;    
            case 12: if(greenColour?changeLabelColor(Color.GREEN,jl_K12):changeLabelColor(Color.RED,jl_K12));
                    break;
            case 13: if(greenColour?changeLabelColor(Color.GREEN,jl_K13):changeLabelColor(Color.RED,jl_K13));
                    break;
            case 14: if(greenColour?changeLabelColor(Color.GREEN,jl_K14):changeLabelColor(Color.RED,jl_K14));
                    break;
                
            //Living Room
            case 15: if(greenColour?changeLabelColor(Color.GREEN,jl_K15):changeLabelColor(Color.RED,jl_K15));
                    break;    
            case 16: if(greenColour?changeLabelColor(Color.GREEN,jl_K16):changeLabelColor(Color.RED,jl_K16));
                    break;
            case 17: if(greenColour?changeLabelColor(Color.GREEN,jl_K17):changeLabelColor(Color.RED,jl_K17));
                    break;
            case 18: if(greenColour?changeLabelColor(Color.GREEN,jl_K18):changeLabelColor(Color.RED,jl_K18));
                    break;
            case 19: if(greenColour?changeLabelColor(Color.GREEN,jl_K19):changeLabelColor(Color.RED,jl_K19));
                    break;
            case 49: if(greenColour?changeLabelColor(Color.GREEN,jl_K49):changeLabelColor(Color.RED,jl_K49));
                    break;

                
            //Dining Area
            case 20: if(greenColour?changeLabelColor(Color.GREEN,jl_K20):changeLabelColor(Color.RED,jl_K20));
                    break;
            case 21: if(greenColour?changeLabelColor(Color.GREEN,jl_K21):changeLabelColor(Color.RED,jl_K21));
                    break;
            case 22: if(greenColour?changeLabelColor(Color.GREEN,jl_K22):changeLabelColor(Color.RED,jl_K22));
                    break;
            case 23: if(greenColour?changeLabelColor(Color.GREEN,jl_K23):changeLabelColor(Color.RED,jl_K23));
                    break;
            case 24: if(greenColour?changeLabelColor(Color.GREEN,jl_K24):changeLabelColor(Color.RED,jl_K24));
                    break;
            case 25: if(greenColour?changeLabelColor(Color.GREEN,jl_K25):changeLabelColor(Color.RED,jl_K25));
                    break;
            case 26: if(greenColour?changeLabelColor(Color.GREEN,jl_K26):changeLabelColor(Color.RED,jl_K26));
                    break;
            case 27: if(greenColour?changeLabelColor(Color.GREEN,jl_K27):changeLabelColor(Color.RED,jl_K27));
                    break;
            case 28: if(greenColour?changeLabelColor(Color.GREEN,jl_K28):changeLabelColor(Color.RED,jl_K28));
                    break;
            case 29: if(greenColour?changeLabelColor(Color.GREEN,jl_K29):changeLabelColor(Color.RED,jl_K29));
                    break;
            case 30: if(greenColour?changeLabelColor(Color.GREEN,jl_K30):changeLabelColor(Color.RED,jl_K30));
                    break;
            case 57: if(greenColour?changeLabelColor(Color.GREEN,jl_K57) : changeLabelColor(Color.RED,jl_K57));
                    break;
                
            //Bedroom
            case 31: if(greenColour?changeLabelColor(Color.GREEN,jl_K31):changeLabelColor(Color.RED,jl_K31));
                    break;
            case 32: if(greenColour?changeLabelColor(Color.GREEN,jl_K32):changeLabelColor(Color.RED,jl_K32));
                    break;
            case 33: if(greenColour?changeLabelColor(Color.GREEN,jl_K33):changeLabelColor(Color.RED,jl_K33));
                    break;
            case 34: if(greenColour?changeLabelColor(Color.GREEN,jl_K34):changeLabelColor(Color.RED,jl_K34));
                    break;
            case 35: if(greenColour?changeLabelColor(Color.GREEN,jl_K35):changeLabelColor(Color.RED,jl_K35));
                    break;
            case 36: if(greenColour?changeLabelColor(Color.GREEN,jl_K36):changeLabelColor(Color.RED,jl_K36));
                    break;
            case 37: if(greenColour?changeLabelColor(Color.GREEN,jl_K37):changeLabelColor(Color.RED,jl_K37));
                    break;
            case 38: if(greenColour?changeLabelColor(Color.GREEN,jl_K38):changeLabelColor(Color.RED,jl_K38));
                    break;
            case 39: if(greenColour?changeLabelColor(Color.GREEN,jl_K39):changeLabelColor(Color.RED,jl_K39));
                    break;
            case 40: if(greenColour?changeLabelColor(Color.GREEN,jl_K40):changeLabelColor(Color.RED,jl_K40));
                    break;
            case 52: if(greenColour?changeLabelColor(Color.GREEN,jl_K52):changeLabelColor(Color.RED,jl_K52));
                    break;
            case 53: if(greenColour?changeLabelColor(Color.GREEN,jl_K53):changeLabelColor(Color.RED,jl_K53));
                    break;

             //Other
             case 42: if(greenColour?changeLabelColor(Color.GREEN,jl_K42):changeLabelColor(Color.RED,jl_K42));
                    break;
             case 43: if(greenColour?changeLabelColor(Color.GREEN,jl_K43):changeLabelColor(Color.RED,jl_K43));
                    break;
             case 59: if(greenColour?changeLabelColor(Color.GREEN,jl_K59):changeLabelColor(Color.RED,jl_K59));
                    break;
                
        }
    }
  

  /**
   * 
   * @param c Background Colour
   * @param j JLabel which will be modify
   * @return Boolean value required by the calling function
   */
  private boolean changeLabelColor(Color c, JLabel j){
        
        if (c.equals(Color.GREEN)) j.setBackground(c);
        else if (c.equals(Color.RED)) j.setBackground(c);
       
        return true;
    }


  //Private Classes

  class MyTableCellRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        
        JTableModel aux = (JTableModel) table.getModel();
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        String status = table.getModel().getValueAt(row, table.getColumnCount()-2).toString();
        boolean greenColour = greenCellOrRow(status);
        
        if(greenColour) c.setBackground(new Color(100, 230, 100));
        else c.setBackground(new Color(230, 100, 100));
        
        //Refresh rows
        aux.setRowColour(row);
        
        return c;
    }
 }

 private class MyMouseListener extends MouseAdapter{

     String _name;

     public MyMouseListener(String name){
         _name = name;
     }
        @Override
     public void mouseClicked(MouseEvent e) {

          boolean found = false;
          int i = 0;
          while((!found) && (i<_labels.size())){
              if(_labels.get(i).equals(_name)){
                  JTabbedData.setSelectedIndex(i);
                  found = true;
              }
              i++;
          }

          // Select Others tab by default
          if(!found) JTabbedData.setSelectedIndex(_labels.size()-1);

         JPanelData.setVisible(true);
         JPanelMap.setVisible(false);

     }
  }

 public boolean greenCellOrRow(String status){
    boolean colorGreen = false;

    if(status.equals(CommonVar.ON) || status.equals(CommonVar.OPEN)
            || status.equals(CommonVar.OCCUPIED)){
        colorGreen = true;
    } else {
        colorGreen = false;
    }

    return colorGreen;
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bathroom;
    private javax.swing.JLabel Bedroom;
    private javax.swing.JLabel Hall;
    private javax.swing.JLayeredPane JLayerMap;
    private javax.swing.JPanel JPanelBack;
    private javax.swing.JPanel JPanelData;
    private javax.swing.JPanel JPanelMap;
    private javax.swing.JTabbedPane JTabbedData;
    private javax.swing.JLabel Kitchen;
    private javax.swing.JLabel LivingRoomSofa;
    private javax.swing.JLabel LivingRoomTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jbBack;
    private javax.swing.JButton jbStartStopRecording;
    private javax.swing.JLabel jlCaption;
    private javax.swing.JLabel jlCurrentActivities;
    private javax.swing.JLabel jlCurrentActivities1;
    private javax.swing.JLabel jlInfo;
    private javax.swing.JLabel jlMap;
    private javax.swing.JLabel jlPreviousActivities;
    private javax.swing.JLabel jlUsername;
    private javax.swing.JLabel jl_K1;
    private javax.swing.JLabel jl_K10;
    private javax.swing.JLabel jl_K11;
    private javax.swing.JLabel jl_K12;
    private javax.swing.JLabel jl_K13;
    private javax.swing.JLabel jl_K14;
    private javax.swing.JLabel jl_K15;
    private javax.swing.JLabel jl_K16;
    private javax.swing.JLabel jl_K17;
    private javax.swing.JLabel jl_K18;
    private javax.swing.JLabel jl_K19;
    private javax.swing.JLabel jl_K2;
    private javax.swing.JLabel jl_K20;
    private javax.swing.JLabel jl_K21;
    private javax.swing.JLabel jl_K22;
    private javax.swing.JLabel jl_K23;
    private javax.swing.JLabel jl_K24;
    private javax.swing.JLabel jl_K25;
    private javax.swing.JLabel jl_K26;
    private javax.swing.JLabel jl_K27;
    private javax.swing.JLabel jl_K28;
    private javax.swing.JLabel jl_K29;
    private javax.swing.JLabel jl_K3;
    private javax.swing.JLabel jl_K30;
    private javax.swing.JLabel jl_K31;
    private javax.swing.JLabel jl_K32;
    private javax.swing.JLabel jl_K33;
    private javax.swing.JLabel jl_K34;
    private javax.swing.JLabel jl_K35;
    private javax.swing.JLabel jl_K36;
    private javax.swing.JLabel jl_K37;
    private javax.swing.JLabel jl_K38;
    private javax.swing.JLabel jl_K39;
    private javax.swing.JLabel jl_K4;
    private javax.swing.JLabel jl_K40;
    private javax.swing.JLabel jl_K42;
    private javax.swing.JLabel jl_K43;
    private javax.swing.JLabel jl_K44;
    private javax.swing.JLabel jl_K49;
    private javax.swing.JLabel jl_K5;
    private javax.swing.JLabel jl_K50;
    private javax.swing.JLabel jl_K51;
    private javax.swing.JLabel jl_K52;
    private javax.swing.JLabel jl_K53;
    private javax.swing.JLabel jl_K54;
    private javax.swing.JLabel jl_K55;
    private javax.swing.JLabel jl_K56;
    private javax.swing.JLabel jl_K57;
    private javax.swing.JLabel jl_K59;
    private javax.swing.JLabel jl_K6;
    private javax.swing.JLabel jl_K7;
    private javax.swing.JLabel jl_K8;
    private javax.swing.JLabel jl_K9;
    private javax.swing.JPanel jpCenter;
    private javax.swing.JPanel jpLeft;
    private javax.swing.JPanel jpRight;
    private javax.swing.JTextArea jtActivitiesHistory;
    private javax.swing.JTextArea jtCurrentActivitiesInfo;
    private javax.swing.JTextArea jtPreviousActivitiesInfo;
    private javax.swing.JTextArea jtSensorsInfo;
    private javax.swing.JTextField jtfUsername;
    // End of variables declaration//GEN-END:variables
}
